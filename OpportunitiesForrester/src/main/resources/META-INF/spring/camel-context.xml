<?xml version="1.0" encoding="UTF-8"?>
<!--

     Copyright 2005-2014 Red Hat, Inc.

     Red Hat licenses this file to you under the Apache License, version
     2.0 (the "License"); you may not use this file except in compliance
     with the License.  You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

     Unless required by applicable law or agreed to in writing, software
     distributed under the License is distributed on an "AS IS" BASIS,
     WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or
     implied.  See the License for the specific language governing
     permissions and limitations under the License.

-->
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-2.5.xsd
       http://camel.apache.org/schema/spring http://camel.apache.org/schema/spring/camel-spring.xsd">
	
	<!-- this is the JDBC data source Config for DV  -->
	<bean id="dataSource" class="org.apache.commons.dbcp2.BasicDataSource" destroy-method="close">
	  <property name="driverClassName" value="org.teiid.jdbc.TeiidDriver"/>
	  <property name="url" value="jdbc:teiid:customer_vdb@mm://52.38.217.15:31000"/>
	  <property name="username" value="teiidUser"/>
	  <property name="password" value="Redhat1!"/>
	</bean>
	 
	<!-- configure the Camel SQL component to use the JDBC data source -->
	<bean id="sql" class="org.apache.camel.component.sql.SqlComponent">
	  <property name="dataSource" ref="dataSource"/>
	</bean>
	
	
	 <bean id="odata" class="org.apache.camel.component.olingo2.Olingo2Component">
	    <property name="configuration">
	      <bean class="org.apache.camel.component.olingo2.Olingo2Configuration">
	        <property name="httpHeaders">
	          <map>
	            <entry key="Authorization" value="Basic dGVpaWRVc2VyOlJlZGhhdDEh" />
	            <entry key="Accept" value="*/*" />
	            <entry key="ContentType" value="application/atom+xml;charset=utf-8" />
	          </map>
	        </property>
	        <property name="serviceUri" value="http://ec2-52-38-217-15.us-west-2.compute.amazonaws.com:8080/odata/customer_vdb"/>
	      </bean>
	    </property>
	  </bean>
	  <bean id="opportunityService" class="com.redhat.salesforce.OpportunityService" />
	
 	<!--<to uri="odata://create/customer_view.opportunity?$format=json" />--><!--  <to uri="salesforce:getSObject?sObjectName=Opportunity" />
	  	<log message="stagestatus to update ${headers.stagestatus}"/>
	  	<bean ref="myOpportunityService" method="updateStatus(${body},${headers.stagestatus})" />
	  	<to uri="salesforce:updateSObject?sObjectName=Opportunity" />
	  	<log message="return from salesforce ${body}"/>
	  	--><!-- <route id="odata-route">
      <from uri="timer://foo?fixedRate=true&amp;period=60000"/>
      <log message="Retrieving data from JBoss Data Virtualization" />
      <to uri="odata://read/customer_view.opportunity?$format=json" />
      <split streaming="true">
      	<simple>${body.getEntries()}</simple>
      	<log message="OData Customer === ${body.getProperties()}" />
      </split>
    </route>-->
    
  <camelContext xmlns="http://camel.apache.org/schema/spring">
  	<!-- use Camel property placeholder loaded from the given file -->
  	<propertyPlaceholder id="placeholder" location="classpath:sql.properties"/>
      
	  <restConfiguration component="jetty" port="9191" bindingMode="json"/>
	  <rest path="/opportunity">
	    <get uri="/syncBigData">
	      <to uri="direct:AllList"/>
	    </get>
	  </rest>
  <route id="getAllList">
    <from uri="direct:AllList"/>
    <to uri="odata://read/opportunities_view.cannonical_opportunities?$format=json"/>
    <split streaming="true">
      <simple>${body.getEntries()}</simple>
      <to uri="direct:processIndiviualOpp"/>
    </split>
  </route>
  <route id="processIndiviualOpp">
    <from uri="direct:processIndiviualOpp"/>
    <bean ref="opportunityService" method="clear"/>
    <bean ref="opportunityService" method="put('Id',${body.getProperties[Id]})"/>
    <bean ref="opportunityService" method="put('Name',${body.getProperties[Name]})"/>
    <bean ref="opportunityService" method="put('url','/services/data/v33.0/sobjects/Opportunity/${body.getProperties[Id]})'"/>
    <bean ref="opportunityService" method="put('Amount',${body.getProperties[Amount]})"/>
    <bean ref="opportunityService" method="put('AccountId',${body.getProperties[AccountId]})"/>
    <bean ref="opportunityService" method="put('StageName',${body.getProperties[StageName]})"/>
    <bean ref="opportunityService" method="put('IsClosed',${body.getProperties[IsClosed]})"/>
    <bean ref="opportunityService" method="put('Probability',${body.getProperties[Probability]})"/>
    <bean ref="opportunityService" method="put('IsWon',${body.getProperties[IsWon]})"/>
    <bean ref="opportunityService" method="put('Fiscal',${body.getProperties[Fiscal]})"/>
    <bean ref="opportunityService" method="getOpp"/>
    <log message="${body}"/>
    <to uri="sql:{{sql.insertOppos}}"/>
   
  </route>
  <route id="updateStatus">
    <from uri="direct:updateStatus"/>
    <setHeader headerName="sObjectId">
      <simple>${headers.id}</simple>
    </setHeader>
  </route>
</camelContext>
<!-- <split>
		<simple>records</simple>
		<log message="${body}"/>
		<to uri="direct:processIndiviualOpp"/>
	</split>
	<convertBodyTo type="java.lang.String"/> -->
</beans>
