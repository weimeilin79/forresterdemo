<?xml version="1.0" encoding="UTF-8"?>
<!--

     Copyright 2005-2014 Red Hat, Inc.

     Red Hat licenses this file to you under the Apache License, version
     2.0 (the "License"); you may not use this file except in compliance
     with the License.  You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

     Unless required by applicable law or agreed to in writing, software
     distributed under the License is distributed on an "AS IS" BASIS,
     WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or
     implied.  See the License for the specific language governing
     permissions and limitations under the License.

-->
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-2.5.xsd
       http://camel.apache.org/schema/spring http://camel.apache.org/schema/spring/camel-spring.xsd">
	<bean
		class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">
		<property name="location">
			<value>classpath:salesforceconfig.properties</value>
		</property>
	</bean>
	
	<bean id="salesforce" class="org.apache.camel.component.salesforce.SalesforceComponent">
		<property name="loginConfig">
			<bean class="org.apache.camel.component.salesforce.SalesforceLoginConfig">
				<property name="loginUrl" value="${loginUrl}"></property>
				<property name="userName" value="${userName}"></property>
				<property name="password" value="${password}"></property>
				<property name="clientId" value="${clientId}"></property>
				<property name="clientSecret" value="${clientSecret}"></property>
			</bean>
		</property>
		<property name="config">
			<bean
				class="org.apache.camel.component.salesforce.SalesforceEndpointConfig">
				<property name="sObjectName" value="${sObjectName}"></property>
				<property name="sObjectClass" value="${sObjectClass}"></property>
			</bean>
		</property>
		<property name="packages" value="${sObjectDTOPackages}"></property>
	</bean>
	
	<!-- this is the JDBC data source Config for DV  -->
	<bean id="dataSource" class="org.apache.commons.dbcp2.BasicDataSource" destroy-method="close">
	  <property name="driverClassName" value="org.teiid.jdbc.TeiidDriver"/>
	  <property name="url" value="jdbc:teiid:customer_vdb@mm://52.38.217.15:31000"/>
	  <property name="username" value="teiidUser"/>
	  <property name="password" value="Redhat1!"/>
	</bean>
	 
	<!-- configure the Camel SQL component to use the JDBC data source -->
	<bean id="sql" class="org.apache.camel.component.sql.SqlComponent">
	  <property name="dataSource" ref="dataSource"/>
	</bean>
	
	
  	<bean id="myOpportunityService" class="com.redhat.salesforce.OpportunityService" />
		
  	<camelContext xmlns="http://camel.apache.org/schema/spring">
  	  <propertyPlaceholder id="placeholder" location="classpath:sql.properties"/>
  	
	  <restConfiguration component="jetty" port="9191" bindingMode="json" apiContextPath="api-doc" >
	    <apiProperty key="cors" value="true" />
	  	<apiProperty key="api.title" value="Forrester Wave Demo" />
	  	<apiProperty key="api.version" value="1.0.0" />
	    <corsHeaders key="Access-Control-Allow-Origin" value="*"/>
	  </restConfiguration>
	  <rest path="/opportunity">	   
	    <get uri="/updateOpp/{id}/{stagestatus}">
	      <to uri="direct:updateStatus"/>
	    </get>
	  </rest>
 
  	  <route id="updateStatus">
  		<from uri="direct:updateStatus"/>
  		<setHeader headerName="sObjectId">
	    	<simple>${headers.id}</simple>        
	  	</setHeader>
	  	<to uri="salesforce:getSObject?sObjectName=Opportunity" />
	  	<log message="stagestatus to update ${headers.stagestatus}"/>
	  	<multicast>
	        <to uri="direct:updateStatusSalesforce"/>
	        <to uri="direct:updateStatusMongoDB"/>
	    </multicast>
  	  </route>
  	
  	  <route id="updateStatusSalesforce">
  		<from uri="direct:updateStatusSalesforce"/>
  		<bean ref="myOpportunityService" method="updateStatus(${body},${headers.stagestatus})" />
	  	<to uri="salesforce:updateSObject?sObjectName=Opportunity" />
	  	<log message="return from salesforce ${body}"/>
  	  </route>
  	  
  	  <route id="updateStatusMongoDB">
  		<from uri="direct:updateStatusMongoDB"/>
  		<bean ref="myOpportunityService" method="createMaptoUpdate(${body},${headers.stagestatus})" />
  		<log message="${body}"/>
  		<to uri="sql:{{sql.updateOpps}}"/>
  	  </route>
  
</camelContext>

</beans>